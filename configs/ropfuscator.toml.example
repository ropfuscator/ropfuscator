#
# Mandatory section. These settings are applied to every function processed by ropfuscator.
#
[general]
# Toggle obfuscation globally.
# If this is set to false, ropfuscator is disabled and other configs are ignored.
# Default: true
obfuscation_enabled = true

# Library path where the gadgets are extracted from.
# This setting will override the system's libc, using a custom library instead.
# Default: empty (when empty, system's 32bit libc.so.6 is used by default)
# custom_library_path = ""
# custom_library_path = "/lib/i386-linux-gnu/libc.so.6"

# Expected library SHA1 to avoid using different version of library unexpectedly.
# If set, the library hash is checked, and if it does not match, obfuscator exits with an error.
# Default: empty (not checked)
# library_hash_sha1 = ""
# library_hash_sha1 = "e3d54f5709190f15a9c51089c70f2069771913c1"

# Extra library paths which are finally linked with the program.
# This setting is used to avoid symbol name collision in gadget addressing.
# Default: empty (when empty, system's 32bit libraries are used by default:
#   libgcc_s.so.1 / libpthread.so.0 / libm.so.6 / libstdc++.so.6)
# linked_libraries = []
# linked_libraries = [ "/lib/i386-linux-gnu/libgcc_s.so.1", "/lib/i386-linux-gnu/libpthread.so.0" ]

# If set to true, ropfuscator will look for gadgets in the code segment
# instead of the code section (which will find more gadgets since code segment is wider)
# Default: true
search_segment_for_gadget = true

# If set to true, symbols which have multiple versions arenot used.
# If set to false, only one version of those symbols is used.
# e.g: angr will not work correctly if this is set to false
# Default: false
avoid_multiversion_symbol = false

# If set to true, print progress of each function obfuscation.
# Default: false
show_progress = false

# If set to true, print a number of instruction obfuscated for each opcode.
# Default: false
print_instr_stat = false

# ================================
# Functions' obfuscation section
#

# These settings are applied to every function processed by ropfuscator.
# Note that the special "default" section does not have a "name" field.
# This section is mandatory.
[functions.default]
    # Toggle obfuscation for function
    # Default: true
    obfuscation_enabled = true

    # ================================
    # Gadget addresses settings
    #

    # Toggle obfuscation of gadget addresses
    # Default: true
    opaque_gadget_addresses_enabled = true

    # Set percentage of addresses to obfuscate in current function
    # Default: 100
    # Accepted values: 0 <= x <= 100
    gadget_addresses_obfuscation_percentage = 100

    # ================================
    # Opaque predicates settings
    #

    # Toggles the usage of opaque predicates
    # Default: false
    opaque_predicates_enabled = false

    # when true, registers and random immediate values are saved onto stack
    # and used by opaque predicates to compute initial values.
    # ignored when opaque predicate is turned off.
    # Default: true
    opaque_saved_stack_values_enabled = true

    # when true, immediate operand is obfuscated with opaque predicate.
    # ignored when opaque predicate is turned off.
    # Default: true
    opaque_immediate_operands_enabled = true

    # when true, branch target address is obfuscated with opaque predicate.
    # ignored when opaque predicate is turned off.
    # Default: true
    opaque_branch_targets_enabled = true

    # Specify opaque predicate algorithm.
    # Available algorithms are:
    # - mov: dummy implementation
    # - r3sat32: repeat 32 times of random 3SAT instances (32 vars)
    # - multcomp: repeat 32 times the multiplication of prime numbers to then compare the result, generating 1 bit
    # Default: mov
    opaque_predicates_algorithm = "mov"

    # Specify (invariant) opaque predicate input generation algorithm.
    # Invariant paque predicates use random input to compute constant output.
    # This setting changes the algorithm to generate the random input value.
    # It has no effect when opaque_predicates_algorithm == "mov".
    # Available algorithms are:
    # - const: constant (dummy) implementation
    # - addreg: use the sum of the available registers to generate a input value (e.g EAX + EBX + ECX + EDX + ESI + EDI)
    # - rdtsc: use RDTSC result as input value
    opaque_predicates_input_algorithm = "addreg"

    # when true, use contextual opaque predicate as well as invariant opaque predicate.
    # It has no effect when opaque_predicates_algorithm == "mov".
    # Default: true
    contextual_opaque_predicates_enabled = true

    # ================================
    # Opaque steganography settings
    #

    # Toggles the usage of instruction hiding
    # This will hide some gadgets inside opaque predicates
    # Default: false
    opaque_stegano_enabled = false

    # ================================
    # Branch divergence settings
    #

    # Toggles the usage of branch divergence algorithms.
    # Default: false
    branch_divergence_enabled = false

    # Max branches depth
    # Default: 32
    branch_divergence_max_branches = 32

    # Available algorithms are:
    # - addreg+mov: use the sum of the available registers to generate a random value (e.g EAX + EBX + ECX + EDX + ESI + EDI)
    # - rdtsc+mov: use RDTSC as random value
    # - negativestack+mov: use the value of [ESP-**] as random value
    # Default: ADDREG
    branch_divergence_algorithm = "addreg+mov"

# Example section.
# The section can have any name, e.g. for explanatory reasons.
[functions.example-label]
    # The function names' are specified through regular expressions.
    name = "main"

    branch_divergence_enabled = false

    opaque_predicates_enabled = true
    opaque_predicates_algorithm = "mov"
